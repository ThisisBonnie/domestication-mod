############################
#
# Domestication Events
#
# Written by Colleen Arkadija
#
############################

namespace = domestication

## Add Haustoric Implant trait to floret pops - triggered on monthly pulse
country_event = {
	id = domestication.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_domesticator_or_protectorate = yes
		has_technology = tech_haustoric_implant
		any_owned_pop = {
			has_job = floret
			is_robot_pop = no
			NOT = { has_trait = trait_haustoric_implant }
		}
	}

	immediate = {
		every_owned_pop = {
			limit = {
				has_job = floret
				is_robot_pop = no
				NOT = {
					pop_has_trait = trait_haustoric_implant
				}
			}
			modify_species = {
				species = this
				add_trait = trait_haustoric_implant
				add_traits_at_start_of_list = yes

				effect = {
					set_citizenship_type = {
						country = root
						type = citizenship_limited
						cooldown = no
					}
					set_living_standard = {
						country = root
						type = living_standard_chemical_bliss
						cooldown = no
					}
					set_military_service_type = {
						country = root
						type = military_service_none
						cooldown = no
					}
					set_population_controls = {
						country = root
						type = yes
						cooldown = no
					}
					set_colonization_controls = {
						country = root
						type = yes
						cooldown = no
					}
				}
			}
		}
	}
}

## Inform player about Haustoric Implant
country_event = {
	id = domestication.2
	title = domestication.2.name
	desc =  domestication.2.desc
	picture = GFX_evt_society_research
	fire_only_once = yes

	is_triggered_only = yes
	hide_window = no

	trigger = {
		is_domesticator_or_protectorate = yes
		has_technology = tech_haustoric_implant
	}

	option = {
		name = domestication.2.a
		trigger = {
			always = yes
		}
	}
}

## Creation of a Domesticated Protectorate
## mass population swaps between subject and overlord
## this/root = subject, from = overlord
country_event = {
	id = domestication.3
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			is_domesticator = yes
		}
		this = {
			is_gestalt = no
			NOT = { has_country_flag = flag_domesticated_protectorate }
		}
	}

	immediate = {
		set_country_flag = flag_domesticated_protectorate

		from = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		every_owned_planet = {
			limit = { always = yes }
			planet_event = {
				id = domestication.5
				scopes = { from = event_target:domesticator_overlord }
			}
		}


		copy_ethos_and_authority = from

		change_government = {
			civics = random
			remove_invalid_civics = yes
		}
		while = {
			limit = {
				OR = {
					has_valid_civic = civic_slaver_guilds
					has_valid_civic = civic_warrior_culture
					has_valid_civic = civic_shared_burden
				}
			}
			change_government = {
				civics = random
				remove_invalid_civics = yes
			}
		}

		#force_add_civic = civic_domesticators

		set_name = random
		change_dominant_species = { species = event_target:overlord_species }

		set_graphical_culture = event_target:domesticator_overlord
		set_city_graphical_culture = event_target:domesticator_overlord

		change_country_flag = random
		randomize_flag_symbol = ornate

		## Add leaders
		while = {
			count = 4
			create_leader = {
				class = scientist
				species = this.owner_species
				name = random
				skill = 3
			}
		}
		while = {
			count = 1
			create_leader = {
				class = admiral
				species = this.owner_species
				name = random
				skill = 3
			}
		}
		while = {
			count = 2
			create_leader = {
				class = governor
				species = this.owner_species
				name = random
				skill = 3
			}
		}

		assign_leader = last_created_leader

		## Remove old leaders
		every_owned_leader = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			kill_leader = {
				fire = yes
			}
		}

		## Destroy all military fleets
		every_owned_ship = {
			limit = {
				is_civilian = no
				NOT = { is_ship_class = shipclass_starbase }
			}
			delete_ship = this
		}

		## hardcoded values to represent scrap from scuttling the fleet

		add_resource = { minerals = 500 }
		add_resource = { alloys = 1000 }

		event_target:domesticator_overlord = {
			add_resource = { minerals = 500 }
			add_resource = { alloys = 1000 }
		}

		every_owned_army = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			remove_army = yes
		}

		## Outlaw Slavery and purges
		set_policy = {
			policy = slavery
			option = slavery_not_allowed
			cooldown = yes
		}
		set_policy = {
			policy = purge
			option = purge_not_allowed
			cooldown = yes
		}

		## Set citizenship rights for non-affini in country
		every_owned_species = {
			limit = {
				NOT = { is_same_species = this.owner_species }
				OR = {
					has_citizenship_type = { country = root type = citizenship_full }
					has_citizenship_type = { country = root type = citizenship_slavery }
				}
			}
			set_citizenship_type = {
				country = root
				type = citizenship_limited
				cooldown = yes
			}
		}

		add_modifier = {
			modifier = "protectorate_floret_jobs"
			days = -1
		}

		# initialize floret index
		country_event = {	id = domestication.7 }
	}
}

## Delete old subject and replace with new country
## this/root = subject, from = overlord
## Not currently used, but I'm keeping this in case I need to switch to this implementation
country_event = {
	id = domestication.4
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			has_valid_civic = civic_domesticators
		}
		this = {
			NOT = { has_country_flag = flag_domesticated_protectorate }
		}
	}

	immediate = {
		from = {
			save_event_target_as = domesticator_overlord
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		if = {
			limit = {
				NOT = {
					any_country = {

					}
				}
			}
			create_country = {
				name = format.domesticated.1
				species = event_target:domesticator_overlord
				ignore_initial_colony_error = yes
				type = default
				name_list = PLANT5
				civics = {
					civic = civic_domesticators
					civic = random
				}
				flag = random
				authority = auth_oligarchic
				ethos = { ethic = ethic_fanatic_xenophile ethic = ethic_militarist }
				effect = {
					copy_ethos_and_authority = fromfrom
					save_event_target_as = new_domesticated_protectorate

					copy_techs_from = {
						target = event_target:domesticator_overlord
						except = {
							# Horizon Signal
							tech_akx_worm_1
							tech_akx_worm_2
							tech_akx_worm_3
						}
					}
					#establish_contact = { who = event_target:domesticator_overlord }
					establish_communications_no_message = event_target:domesticator_overlord
				}
			}
		}



		every_system = {
			limit = {
				exists = owner
				is_owned_by = event_target:domesticated_regime
			}
			starbase = {
				set_owner = event_target:new_domesticated_protectorate
			}
			every_system_planet = {
				limit = {
					AND = {
						exists = owner
						owner = {
							is_same_value = event_target:domesticated_regime
						}
					}
					NOR = {
						has_orbital_bombardment = yes
						has_ground_combat = yes
						is_planet_class = "pc_broken"
					}
				}
				set_owner = event_target:new_domesticated_protectorate
				remove_all_armies = yes
				validate_planet_buildings_and_districts = yes
			}
		}

		ordered_owned_planet = {
			limit = {
				exists = owner
				is_owned_by = event_target:new_domesticated_protectorate
			}
			position = 0
			order_by = trigger:num_pops
			set_capital = yes
		}

		##Destroy old country
		event_target:domesticated_regime = {
			every_owned_pop = { #In case any pops are left behind
				kill_pop = yes
			}
			destroy_country = yes
		}




		#So we don't get "orphaned" pops with no job categories in case of non-Ketling system owners
		#every_system = {
		#	limit = {
		#		OR = {
		#			NOT = { exists = owner }
		#			AND = {
		#				exists = owner
		#				NOT = {
		#					owner = { is_same_value = event_target:ratling_country }
		#				}
		#			}
		#		}
		#	}
		#	every_system_planet = {
		#		limit = {
		#			has_planet_flag = ratling_planet
		#			any_owned_pop = {
		#				is_same_species = event_target:ratling_species
		#				NOT = { exists = owner }
		#			}
		#		}
		#		every_owned_pop = {
		#			limit = {
		#				is_same_species = event_target:ratling_species
		#				NOT = { exists = owner }
		#			}
		#			kill_pop = yes
		#		}
		#	}
		#}

		#Create a Capital
		#IF = { #If the old capital belongs to Ratlings, use it
		#	limit = {
		#		exists = event_target:ratling_capital
		#		event_target:ratling_capital = {
		#			exists = owner
		#			owner = {
		#				is_same_value = event_target:ratling_country
		#			}
		#		}
		#	}
		#	event_target:ratling_capital = {
		#		set_capital = yes
		#	}
		#}
		#ELSE = { #Otherwise, make a new Capital
			random_system = {
				limit = {

				}
				random_system_planet = {
					limit = {
						#has_planet_flag = ratling_planet
						exists = owner
						owner = {
							is_same_value = event_target:new_domesticated_protectorate
						}
						planet_size > 12
						NOT = { is_planet_class = "pc_broken" }
					}
					#save_global_event_target_as = ratling_capital
					set_capital = yes
				}
			}
		#}



		event_target:new_domesticated_protectorate = {

			##Add resources
			add_resource = { minerals = 7000 }
			add_resource = { energy = 7000 }
			add_resource = { food = 3000 }
			add_resource = { consumer_goods = 3000 }
			add_resource = { alloys = 2000 }
			add_resource = { influence = 1000 }
			add_resource = { unity = 27000 }

			event_target:new_domesticated_protectorate = {
				##Create Mining Stations
				every_planet_within_border = {
					limit = {
						has_deposit_for = shipclass_mining_station
					}
					create_mining_station = { owner = event_target:new_domesticated_protectorate }
				}
				create_fleet = {
					effect = {
						set_owner = event_target:new_domesticated_protectorate
						create_ship = {
							name = random
							random_existing_design = constructor
							graphical_culture = "reptilian_01"
						}
						set_location = {
							target = event_target:new_domesticated_protectorate
							distance = 10
							angle = random
						}
					}
				}
				create_fleet = {
					effect = {
						set_owner = event_target:new_domesticated_protectorate
						create_ship = {
							name = random
							random_existing_design = science
							graphical_culture = "reptilian_01"
						}
						set_location = {
							target = event_target:new_domesticated_protectorate
							distance = 10
							angle = random
						}
					}
				}
			}

			##Add leaders
			while = {
				count = 4
				create_leader = {
					class = scientist
					species = event_target:new_domesticated_protectorate
					name = random
					skill = 3
				}
			}
			while = {
				count = 1
				create_leader = {
					class = admiral
					species = event_target:new_domesticated_protectorate
					name = random
					skill = 3
				}
			}
			create_leader = {
				class = governor
				species = event_target:new_domesticated_protectorate
				name = random
				skill = 3
			}



			set_country_flag = flag_domesticated_protectorate
		}

		## set primary species
		#change_dominant_species = {
		#	species = from
		#}
		## Set ethics to match

		## set civics to match

		last_created_country = {
			set_subject_of = {
				who = event_target:domesticator_overlord
				subject_type = vassal
			}
		}
	}
}

planet_event = {
	id = domestication.5
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		# if less than 2 affini pops on planet
		count_owned_pop = {
			limit = {
				is_same_species = from.owner_species
			}
			count < 2
		}
	}

	# this/root = planet
	# from = affini compact

	immediate = {
		#this.country.overlord = {
		#	save_event_target_as = overlord_empire
		#}

		from = {
			owner_species = {
				save_event_target_as = overlord_species
			}
		}

		from = {
			random_owned_planet = {
				limit = {
					count_owned_pop = {
						limit = {
							is_same_species = event_target:overlord_species
							can_live_on_planet = root
							OR = {
								is_pop_category = worker
								AND = {
									is_pop_category = specialist
									NOT = { has_job = colonist }
								}
							}

						}
						count > 2
					}
				}
				save_event_target_as = overlord_planet
				while = {
					count = 2
					random_owned_pop = {
						limit = {
							is_same_species = event_target:overlord_species
							can_live_on_planet = root
							OR = {
								is_pop_category = worker
								AND = {
									is_pop_category = specialist
									NOT = { has_job = colonist }
								}
							}
						}
						resettle_pop = {
							pop = this
							planet = root
						}
					}
				}

				root = {
					while = {
						count = 2
						random_owned_pop = {
							limit = {
								NOT = { is_same_species = event_target:overlord_species }
								can_live_on_planet = event_target:overlord_planet
							}
							resettle_pop = {
								pop = this
								planet = event_target:overlord_planet
							}
						}
					}
				}
			}
		}
	}
}

## Remove flag_domesticated_protectorate from country if no longer a subject
country_event = {
	id = domestication.6
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_country_flag = flag_domesticated_protectorate
	}

	immediate = {
		remove_country_flag = flag_domesticated_protectorate
		remove_modifier = protectorate_floret_jobs
	}
}

country_event = {
	id = domestication.7
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_domesticator_or_protectorate = yes
	}

	immediate = {
		set_variable = {
			which = floret_index
			value = 0
		}
	}
}

## gatekeeper to determine if Biorhythm Transmitter resettlement happens
country_event = {
	id = domestication.8
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_domesticator_or_protectorate = yes
		has_ascension_perk = ap_benefic_acquisition
		# this may end up being super resouce-intensive, and I may need to shift this to check less often
		any_owned_starbase = {
			AND = {
				has_starbase_building = biorhythm_transmitter
				owner = {
					any_neighbor_country = {
						is_domesticator_or_protectorate = no
						any_owned_planet = {
							AND = {
								num_pops > 10
								distance = {
									source = prevprevprev
									use_bypasses = no
									min_jumps = 1
									max_jumps = 4
								}
								any_owned_pop = {
								 can_hear_biorhythm = yes
								}
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		random_list = {
			# default 1/25 chance of resettlement. ~1 every 2 years
			24 = {}
			1 = {
				modifier = {
					factor = 1.5
					# 3 or more transmitters
					count_owned_starbase = {
						count >= 3
						limit = {
							has_starbase_building = biorhythm_transmitter
						}
					}
				}
				modifier = {
					factor = 2
					# 6 or more transmitters
					count_owned_starbase = {
						count >= 6
						limit = {
							has_starbase_building = biorhythm_transmitter
						}
					}
				}
				country_event = { id = domestication.9 }
			}
		}
	}
}

## Pop resettlement from Biorhythm Transmitter
country_event = {
	id = domestication.9
	title = domestication.9.name
	desc =  domestication.9.desc
	picture = GFX_evt_colony_settlement

	is_triggered_only = yes
	hide_window = no
	location = event_target:br_resettle_newworld

	trigger = {
		is_domesticator_or_protectorate = yes
		has_ascension_perk = ap_benefic_acquisition
	}

	immediate = {
		random_neighbor_country = {
			limit = {
				is_domesticator_or_protectorate = no
				any_owned_planet = {
					AND = {
						num_pops > 10
						any_owned_pop = {
						 can_hear_biorhythm = yes
						}
						root = {
							any_owned_starbase = {
								has_starbase_building = biorhythm_transmitter
								distance = {
									source = prevprev
									use_bypasses = no
									min_jumps = 1
									max_jumps = 4
								}
							}
						}
					}
				}
			}
			save_event_target_as = br_home_empire
			random_owned_pop = {
				limit = {
					can_hear_biorhythm = yes
					planet = {
						AND = {
							num_pops > 10
							root = {
								any_owned_starbase = {
									has_starbase_building = biorhythm_transmitter
									distance = {
										source = prevprev
										use_bypasses = no
										min_jumps = 1
										max_jumps = 4
									}
								}
							}
						}
					}
				}
				weights = {
					base = 1
					modifier = {
						add = 1
						has_job_category = worker
					}
					modifier = {
						add = 2
						OR = {
							is_pop_category = slave
							is_unemployed = yes
						}
					}
					modifier = {
						factor = 0.25
						has_job_category = ruler
					}
					modifier = {
						factor = 1.5
						OR = {
							# Yes to treehuggers
							pop_has_ethic = ethic_fanatic_xenophile
							pop_has_ethic = ethic_xenophile
						}
					}
					modifier = {
						factor = 0.1
						OR = {
							# No bigots
							pop_has_ethic = ethic_fanatic_xenophobe
							pop_has_ethic = ethic_xenophobe
						}
					}
					modifier = {
						factor = 1.5
						OR = {
							# Yes to subby pervs
							has_trait = trait_deviants
							has_trait = trait_docile
						}
					}
					modifier = {
						factor = 0.5
						OR = {
							# No uptight brats
							has_trait = trait_conformists
							has_trait = trait_unruly
						}
					}
				}
				save_event_target_as = br_resettle_pop
				planet = { save_event_target_as = br_resettle_homeworld }
				set_timed_pop_flag = {
					flag = br_resettled
					years = 2
				}

				root = {
					random_owned_planet = {
						limit = {
							event_target:br_resettle_pop = {
								can_live_on_planet = prev
							}
						}
						weights = {
							base = 1
							modifier = {
								factor = 2
								# good habitability
								habitability = { who = event_target:br_resettle_pop value >= 0.75 }
							}
							modifier = {
								factor = 0.25
								# low habitability
								habitability = { who = event_target:br_resettle_pop value <= 0.45 }
							}
							modifier = {
								factor = 1.25
								# available jobs
								free_jobs > 2
							}
							modifier = {
								factor = 0.5
								# available jobs
								free_jobs <= 0
							}
							modifier = {
								factor = 1.5
								# available housing
								free_housing > 0
							}
						}
						save_event_target_as = br_resettle_newworld
						resettle_pop = {
							pop = event_target:br_resettle_pop
							planet = this
						}
					}
				}
			}
		}
	}

	option = {
		name = domestication.9.a
		trigger = {
			always = yes
		}
		hidden_effect = {
			event_target:br_home_empire = {
				country_event = {
					id = domestication.10
					days = 25
					random = 10
					scopes = { from = root }
				}
			}
		}
	}
}

## Inform country of pop lost to Biorhythm Transmitter
country_event = {
	id = domestication.10
	title = domestication.10.name
	desc =  domestication.10.desc
	picture = GFX_evt_unknown_ships

	is_triggered_only = yes
	hide_window = no

	trigger = {
		always = yes
	}

	immediate = {
		from = { save_event_target_as = br_pop_stealer }
	}

	option = {
		name = domestication.10.a
		trigger = {
			always = yes
		}
		add_opinion_modifier = {
			who = from
			modifier = opinion_br_pop_stolen
		}
	}
}

## Add Haustoric Module trait to mechanical floret pops - triggered on monthly pulse
country_event = {
	id = domestication.11
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_domesticator_or_protectorate = yes
		has_technology = tech_haustoric_module
		has_policy_flag = ai_full_rights
		any_owned_pop = {
			is_robot_pop = yes
			has_job = floret
			NOT = { has_trait = trait_robot_haustoric_module }
		}
	}

	immediate = {
		every_owned_pop = {
			limit = {
				is_robot_pop = yes
				has_job = floret
				NOT = {
					pop_has_trait = trait_robot_haustoric_module
				}
			}
			modify_species = {
				species = this
				add_trait = trait_robot_haustoric_module
				add_traits_at_start_of_list = yes

				effect = {
					set_citizenship_type = {
						country = root
						type = citizenship_limited
						cooldown = no
					}
					set_military_service_type = {
						country = root
						type = military_service_none
						cooldown = no
					}
					set_colonization_controls = {
						country = root
						type = yes
						cooldown = no
					}
				}
			}
		}
	}
}

## Remove Deomesticated Hivemind features from country if no longer a subject
country_event = {
	id = domestication.12
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_country_flag = flag_domesticated_hive_mind
	}

	immediate = {
		remove_opinion_modifier = {
			modifier = opinion_domesticated_hivemind
			who = from
		}
		from = {
			remove_opinion_modifier = {
				modifier = opinion_our_domesticated_hivemind
				who = root
			}
		}

		every_owned_planet = {
			limit = {
				has_deposit = d_hive_domestication_lab
			}
			remove_deposit = d_hive_domestication_lab
		}

		remove_country_flag = flag_domesticated_hive_mind
	}
}

## Creation of a Domesticated Hive Mind
## mass population swaps between subject and overlord
## this/root = subject, from = overlord
country_event = {
	id = domestication.13
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			is_domesticator = yes
			has_technology = tech_hivemind_domestication
		}
		this = {
			is_hive_empire = yes
			NOT = { has_country_flag = flag_domesticated_hive_mind }
		}
	}

	immediate = {
		set_country_flag = flag_domesticated_hive_mind
		add_opinion_modifier = {
			modifier = opinion_domesticated_hivemind
			who = from
		}

		from = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
			add_opinion_modifier = {
				modifier = opinion_our_domesticated_hivemind
				who = root
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		set_graphical_culture = event_target:domesticator_overlord
		set_city_graphical_culture = event_target:domesticator_overlord

		change_country_flag = random
		randomize_flag_symbol = ornate

		## Destroy all military fleets
		every_owned_ship = {
			limit = {
				is_civilian = no
				NOT = { is_ship_class = shipclass_starbase }
			}
			delete_ship = this
		}

		## hardcoded values to represent scrap from scuttling the fleet

		add_resource = { minerals = 500 }
		add_resource = { alloys = 1000 }

		event_target:domesticator_overlord = {
			add_resource = { minerals = 500 }
			add_resource = { alloys = 1000 }
		}

		every_owned_army = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			remove_army = yes
		}

		capital_scope = {
			add_deposit = d_hive_domestication_lab
		}

	}
}

## Relocation of Hive Facility - Capital Changed
# I think this is the only event needed - no need for seconday event for conquest?
planet_event = {
	id = domestication.14
	title = domestication.14.name
	desc =  domestication.14.desc
	picture = GFX_evt_hive_mind

	is_triggered_only = yes
	hide_window = no

	trigger = {
		owner = { has_country_flag = flag_domesticated_hive_mind }
		from = {
			has_deposit = d_hive_domestication_lab
		}
	}

	immediate = {
		from = {
			remove_deposit = d_hive_domestication_lab
		}
		this = {
			add_deposit = d_hive_domestication_lab
		}
	}

	option = {
		name = domestication.14.a
		trigger = {
			always = yes
		}
	}
}

## Creation of a Domesticated Hive Mind
## mass population swaps between subject and overlord
## this/root = subject, from = overlord
country_event = {
	id = domestication.15
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			is_domesticator = yes
			has_technology = tech_hivemind_domestication
			has_technology = tech_haustoric_module
		}
		this = {
			is_hive_empire = yes
			NOT = { has_country_flag = flag_domesticated_machine_int }
		}
	}

	immediate = {
		set_country_flag = flag_domesticated_machine_int
		add_opinion_modifier = {
			modifier = opinion_domesticated_hivemind
			who = from
		}

		from = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
			add_opinion_modifier = {
				modifier = opinion_our_domesticated_hivemind
				who = root
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		set_graphical_culture = event_target:domesticator_overlord
		set_city_graphical_culture = event_target:domesticator_overlord

		change_country_flag = random
		randomize_flag_symbol = blocky

		## Destroy all military fleets
		every_owned_ship = {
			limit = {
				is_civilian = no
				NOT = { is_ship_class = shipclass_starbase }
			}
			delete_ship = this
		}

		## hardcoded values to represent scrap from scuttling the fleet

		add_resource = { minerals = 500 }
		add_resource = { alloys = 1000 }

		event_target:domesticator_overlord = {
			add_resource = { minerals = 500 }
			add_resource = { alloys = 1000 }
		}

		every_owned_army = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			remove_army = yes
		}

		capital_scope = {
			add_deposit = d_machine_domestication_lab
		}

	}
}

## Relocation of Machine Facility - Capital Changed
# I think this is the only event needed - no need for seconday event for conquest?
planet_event = {
	id = domestication.16
	title = domestication.16.name
	desc =  domestication.16.desc
	picture = GFX_evt_sapient_AI

	is_triggered_only = yes
	hide_window = no

	trigger = {
		owner = { has_country_flag = flag_domesticated_machine_int }
		from = {
			has_deposit = d_machine_domestication_lab
		}
	}

	immediate = {
		from = {
			remove_deposit = d_machine_domestication_lab
		}
		this = {
			add_deposit = d_machine_domestication_lab
		}
	}

	option = {
		name = domestication.16.a
		trigger = {
			always = yes
		}
	}
}

## Remove Domesticated Machine Int features from country if no longer a subject
country_event = {
	id = domestication.17
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_country_flag = flag_domesticated_machine_int
	}

	immediate = {
		remove_country_flag = flag_domesticated_machine_int
		remove_opinion_modifier = {
			modifier = opinion_domesticated_hivemind
			who = from
		}
		from = {
			remove_opinion_modifier = {
				modifier = opinion_our_domesticated_hivemind
				who = root
			}
		}

		every_owned_planet = {
			limit = {
				has_deposit = d_machine_domestication_lab
			}
			remove_deposit = d_machine_domestication_lab
		}
	}
}

# debug event for in case we accidentally get Affini florets
country_event = {
	id = domestication.18
	hide_window = yes

	is_triggered_only = yes
	fire_only_once = yes

	trigger = {
		always = yes
	}

	immediate = {
		every_owned_pop = {
			limit = {
				is_same_species = root.owner_species
				has_trait = trait_haustoric_implant
			}
			modify_species = {
				species = this
				remove_trait = trait_haustoric_implant
			}
		}
	}
}
